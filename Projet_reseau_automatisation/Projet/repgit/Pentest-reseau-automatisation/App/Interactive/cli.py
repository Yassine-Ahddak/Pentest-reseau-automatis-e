import json
import sys
from App.Interactive import args
from App.Scan import scan
from App.Exploit import exploit
class Cli:
    def __init__(self):
        self.options = []
        self.choice = -1
        self.loadsoption = []
        self.getOptions = ""

    def start(self):
        self.getConf()

    def interaction(self,text,type):
        for attempt in range(10):
            try:
                if type == "int":
                    self.choice = int(input(text+" : "))
                elif type == "str":
                    return str(input(text+" : "))

            except Exception as e:
                print("Indiquer un choix prÃ©sent dans la liste")
            else:
                break

    def getConf(self):
        count = 0
        print("Options : ")
        with open("conf.ini","r",encoding="UTF-8") as c:
                lines = c.readlines()
                for line in lines:
                    if line[:1] == "#":
                        continue
                    line = line.split("=")
                    if "_cli" in line[0]:
                        self.options.append(line)
                        # allArg_mapping = json.loads(line[1])
                        name = line[0].split("_")
                        print(str(count) + ") "+ name[0] +" "+ name[1])
                        count+=1
        self.interaction("Choisir une option (int)",'int')

        self.loads_options_choice(self.options[self.choice])

    def loads_options_choice(self,choiceArr):
        argsA = args.Args()
        options = json.loads(choiceArr[1])
        # getModuleByObj = options.split('_')
        if len(options) > 0:
            choices = []
            for option in options:
                for arg in option.split("|"):
                    if "-" in arg:
                        choices.append(arg)
            self.exec_cli_byArgs(choices,argsA)
        else:
            argsA.help()
            print("Exemple de choix : -t -s -v")
            choices = self.interaction("Choisir une/des option(s) parmis les arguments ci-dessus","str")
            self.exec_cli_byArgs(choices,argsA)

    
    def exec_cli_byArgs(self,choices,argsA):
        try:
            choices = choices.split(" ")
        except:
            pass
        for choice in choices:
                with open("conf.ini","r",encoding="UTF-8") as c:
                    lines = c.readlines()
                    for line in lines:
                        if line[:1] == "#":
                            continue
                        line = line.split("=")
                        if "_mapping" in line[0]:
                            if choice in line[1]:
                                getMapping = json.loads(line[1])
                                object_by_name = line[0].split("_")[0]
                                object_method = getattr(sys.modules[__name__], object_by_name.lower())
                                argsA.call_method(getattr(object_method,object_by_name), getMapping[0],choice)

    # def exec_cli_byArgs(self,choices,argsA):
    #     for choice in choices.split(" "):
    #             with open("conf.ini","r",encoding="UTF-8") as c:
    #                 lines = c.readlines()
    #                 for line in lines:
    #                     if line[:1] == "#":
    #                         continue
    #                     line = line.split("=")
    #                     if "_mapping" in line[0]:
    #                         if choice in line[1]:
    #                             getMapping = json.loads(line[1])
    #                             object_by_name = line[0].split("_")[0]
    #                             object_method = getattr(sys.modules[__name__], object_by_name.lower())
    #                             argsA.call_method(getattr(object_method,object_by_name), getMapping[0],choice)
        
        
        # choiceArr = json.loads(str(choiceArr))
        # print()

                             
            
