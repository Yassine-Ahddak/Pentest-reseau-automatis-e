# self.quick_silent_complete
# getServices -s,-v,--version(boolean)
# getPorts -a,--all | -r,--range | -l,--list | -t,--top 
# getOS 

import nmap3
from App.Exploit import exploit
import json
    

## Début de l'automotasitation du Scan réseau
nmap = nmap3.Nmap("/usr/bin/nmap")
scan_tecniques = nmap3.NmapScanTechniques()

class Scan:
    def __init__(self):
        self.level = 0

## Methode pour detecter le système d'exploitation
    def getOs(self,target):
        try:
            result = nmap.nmap_os_detection(target[0])
        except Exception as e:
            print(e)
        return result

## Methode pour scanner les ports
    def getPorts(self,target, args='-p 0-65535'):
        if target[1] in ["-a","--all"]:
            result = nmap.scan_top_ports(target[0],args = args) 
            return result

        if target[1] in ["-r","--range"]:
            # Demande à l'utilisateur d'entrer la plage de ports
            ports_range = input("Entrez la plage de ports (ex: 20-80): ")
            result = nmap.scan_top_ports(target[0], args=f'-p {ports_range}')
            return result
        
        if target[1] in ["-l","--list"]:
            # Demande à l'utilisateur de saisir la liste des ports
            ports_input = input("Entrez la liste des ports à scanner, séparés par des espaces (ex: 22 80 443): ")
            # Créer une liste de ports à partir de l'entrée de l'utilisateur
            port_list = ports_input.split() # Cela divise la chaîne en une liste, en utilisant l'espace comme séparateur
            # Convertir la liste en une chaîne de ports pour nmap
            port_str = ','.join(port_list) # Rejoindre les éléments de la liste en une chaîne séparée par des virgules
            result = nmap.scan_top_ports(target[0], args=f'-p {port_str}')
            return result

        if target[1] in ["-t","--top"]:
            # Liste des top ports à scanner
            top_ports = "20,21,22,23,25,53,80,110,119,123,143,161,443"
            # Construire la commande Nmap avec la liste des top ports
            result = nmap.scan_top_ports(target[0], args=f'-p {top_ports}')
            return result

    
 ## Methode pour identifier les services et versions
    def getServices(self,target):
        if target[1] in ["-v","--version"]:
            result = nmap.nmap_version_detection(target[0]) # Must be root
        else:
            result = nmap.nmap_version_detection(target[0])
        return result
        
## Méthode de scan
# Scan rapide
    def Quick(self,target, args="-F"):
        
        for method in ["-sS","-sT","-sF","-sP","-sL","-sU"]:
            r = scan_tecniques.scan_command(method, target=target[0],args=None)
            print(method)
            print(scan_tecniques.parser.filter_top_ports(r))
        #result = scan_tecniques.nmap_syn_scan(target[0], args)
        # print(result)
        return True

# Scan silencieux
    def Silent(self,target, args="-sS"):
        result = scan_tecniques.nmap_syn_scan(target[0], args)
        print(result)
        return result

# Scan complet
    def Complete(self,target, args="-p1-65535 -sV -sC -O -T4"):
        result = nmap.nmap_version_detection(target[0], args)
        
        pretty_json = json.dumps(result, indent=4)
        print(pretty_json)
        return result

    # def autoExploit(self,target):
    #     #Première étape récupération des ports/versions
    #     target[1] = "-v"
    #     sploit = exploit.Exploit(self)
    #     sploit.launcherPoC(target)

# scan = Scan()

# ## Target IP
# target_ip = input("Entrez l'adresse IP cible : ")

# ## Choix du type de scan
# print("Choisissez le type de scan à effectuer :\n[1] Quick scan\n[2] Silent scan\n[3] Complete scan\n[4] Options Avancées")
# scan_choice = input("Votre choix : ")

#  ## Appel la méthode correspondante en fonction du choix de l'utilisateur
# if scan_choice == "1":
#     print("Réalisation d'un Quick Scan...")
#     results = scan.quick_scan(target_ip)
# if scan_choice == "2":
#     print("Réalisation d'un Slient Scan...")
#     results = scan.silent_scan(target_ip)
# if scan_choice == "3":
#     print("Réalisation d'un Complete Scan...")
#     results = scan.complete_scan(target_ip)
# if scan_choice == "4":
#     # Demande spécifique des options avancées l'utilisateur souhaite exécuter
#     advanced_options = input("Choisissez parmi les options avancées : os, ports, services (séparées par une virgule) : ").split(',')
#     if 'os' in advanced_options:
#         print("Résultats OS :")
#         results = scan.getOs(target_ip)
#     if 'ports' in advanced_options:
#         port_arg = input("Entrez l'argument pour le scan de ports (-a,--all pour tous, -r,--range pour une plage, -t,--top pour top, ou -l,--list pour entrer une liste) :")
#         print("Résultats Ports :")
#         results = scan.getPorts(target_ip)
#     if 'services' in advanced_options:
#         print("Résultats Services")
#         results = scan.getServices(target_ip)
# else:
#     print("Choix invalide.")
#     results = None

# ## Affichage les résultats du scan
# if results is not None:
#     print(results)
        
## OS results
# os_results = scan.getOs(target_ip)
# print(os_results)

## Ports results
# scan_ports_option = input("Entrez l'option de scan (-a pour tous les ports, -r pour une plage, -l pour une liste, -t pour les top ports) :")
# ports_results = scan.getPorts(target_ip, scan_ports_option)
# print(ports_results)


## Services results
# services_results = scan.getServices(target_ip)
# print(services_results)