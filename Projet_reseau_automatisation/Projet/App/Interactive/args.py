# self.quick_silent_complete
# getServices -s,-v,--version(boolean)
# getPorts -a,--all : -r,--range : -l,--list : -t,--top 
# getOS -o, --os
import sys
from App.Scan import scan
from App.Log import log
from App.Interactive import mapping
from App.Interactive import cli
import json
import re

global target
target = ""
class Args:
    def __init__(self):
        self.level = 0
        self.error = False
        self.target = ""

    def getTarget(self,argv):
        ip_address = None
        # Regular expression pattern to match an IPv4 address
        ip_pattern = r'\b(?:\d{1,3}\.){3}\d{1,3}\b'

        for i in range(1, len(argv)):
            if argv[i] == '-target' and i + 1 < len(argv):
                match = re.search(ip_pattern, argv[i + 1])
                if match:
                    ip_address = match.group(0)
                    break
        return ip_address

    def Verify(self):
        log.Logs().Debug("Started : Verify",3)
        args = sys.argv
        arguments = []
        errors = []
        ip_pattern = r'\b(?:\d{1,3}\.){3}\d{1,3}\b'

        with open("conf.ini","r",encoding="UTF-8") as c:
            lines = c.readlines()
            for line in lines:
                if line[:1] == "#":
                    continue
                line = line.split("=")
                if "_mapping" in line[0]:
                    allArg_mapping = json.loads(line[1])
                    for allArg in allArg_mapping:
                        if "-" in allArg:
                            arguments.append(allArg)
            if len(args) < 2:
                command_line_interface = cli.Cli()
                command_line_interface.start()
            
            for arg in args:
                if "main.py" not in arg:
                    if arg not in arguments:
                        match = re.search(ip_pattern, arg)
                        if not match:
                            errors.append(arg)
                            self.error = True
        if self.error:
            log.Logs().Debug("Error : Command not found",3)
            self.help(errors)


    def help(self,errors = []):
        log.Logs().Debug("Started : Help",3)
        print("-q , --quick    : Scan rapide        | ","-S , --silent   : Scan silencieux")
        print("-c , --complete : Scan complet       | ","-s , --service  : Nom service")
        print("-v , --version  : Version service    | ","-a , --all      : Tous les ports 0 - 65635")
        print("-r , --range    : Range, ex:100-1000 | ","-l , --list     : Liste ports, ex:[80,443,...]")
        print("-t , --top      : Top port           | ","-o , --os       : Système d'exploitation |")
        print("-exploit , --Exploit     : Tentative d'exploitation")
        print('\r\n')
        if errors:
            for err in errors:
                print('La commande "'+err+'" n\'est pas recoonu')
                log.Logs().Debug('Command "'+err+'" not found',3)
            sys.exit()
        
    #Permet d'appeler une fonction par une chaine de caractère
    def call_method(self,o, name,arg,arg2 = None):
        log.Logs().Debug("Started : call_method",3)

        try: 
            o = o()
            targets = [self.getTarget(sys.argv),str(arg)]
            return getattr(o, name)(targets)
        except Exception as e:
            log.Logs().Debug(e,1)
            print("Verifier le mapping fonction:args",str(e))        
    
    def mapping_args_scanFunc(self):
        log.Logs().Debug("Started : mapping_args_scanFunc",3)
        #vérification de l'ensemble des commandes
        self.Verify()
        maps = mapping.Maps()
        maps.getMap()



            
        #Récupération des arguments depuis sys
        args = sys.argv
        for arg in args:
            # Ignorer le fichier de lancement
            if "main" not in arg:
                # Récupération de chaque mappage
                for map in maps.main_mapping:
                    # Association aux arguments correspondants
                    if arg in map:
                        # Appel de la méthode par son module puis son nom de class suite au mapping dans conf.ini
                        # 0 = module
                        # 1 = class
                        # 2 = Method
                        # arg = argument de la méthode
                        # print(map[2])
                        self.call_method(getattr(map[0], map[1]), map[2],arg,"")

